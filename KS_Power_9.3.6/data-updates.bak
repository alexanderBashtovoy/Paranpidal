local fuel_values = {

-- coefficient *8.35 above natural;  8.35*x (kg/liquid , m3/gas)

["gas-hydrogen"] = "90KJ", -- 10,78 МДж/м3 
["hydrogen"] = "90KJ", -- 10,78 МДж/м3 

["liquid-multi-phase-oil"] = "180KJ", --21,5MДж/кг
["crude-oil"] = "367KJ",-- 44 MДж/кг
  
  ["heavy-oil"] = "330KJ", -- МАЗУТ
  ["liquid-naphtha"] = "330KJ",
  
  ["light-oil"] = "345KJ",
 	["liquid-fuel"] = "350KJ", 
	["liquid-fuel-oil"] = "375KJ",  --Gas oil	38MДж/кг
	["diesel"] = "375KJ", -- 44,8-43,5 MДж/кг
	["diesel-fuel"] = "375KJ",
	["gasoline"] = "384KJ", -- 46 МДж/кг, 32,7 МДж/литр
	["kerosene"] = "359KJ", -- 43 МДж/кг	

  ["petroleum-gas"] = "350KJ",

	
	["gas-natural-1"] = "280KJ",  -- 33,5 МДж/м3 
	["gas-raw-1"] = "250KJ",

	["gas-methane"] = "279KJ", -- 33,41 МДж/м3 
	["gas-ethane"] = "500KJ",  -- 59,85 МДж/м3 
	["gas-butane"] = "950KJ", -- 113,81 МДж/м3 
	
	["gas-propene"] = "380KJ", -- 45,6 МДж/м3 
	["gas-ethylene"] = "400KJ",  -- 48 Мдж/м3
	["gas-benzene"] = "1210KJ", -- 145 МДж/м3 -- БЕНЗОЛ

	["gas-butadiene"] = "948KJ", -- butilene 113,51
	["gas-ethylbenzene"] = "1308KJ",

	
  	["acetylene"] = "468KJ", -- 56,04 МДж/м3 


["gas-synthesis"] = "96KJ", -- 11,5 Мдж/м3
["gas-residual"] = "350KJ", -- 42 Мдж/м3	

    ["gas-methanol"] = "180KJ", -- 21,1-22 MДж/кг
	["methanol"] = "180KJ", -- 21,1-22 MДж/кг
    ["acetone"] = "262KJ", -- 31,4 МДж/кг
	["coal-gas"] = "146KJ", -- 17,5 Мдж/м3
	["syngas"] = "12KJ", -- 11,5 Мдж/м3	
	["liquid-toluene"] = "1308KJ", --156,71 Мдж/м3
	["gas-hydrazine"] = "380KJ", --fuel_value = "380KJ", 14644 кДж/кг
	
	["gas-ammonia"] = "155KJ",  --18,6  Мдж/м3
	["gas-hydrogen-sulfide"] = "182KJ",  --21,75  Мдж/м3
	
	["combustion-mixture1"] = "300KJ",
	["combustion-mixture2"] = "300KJ",
	["diborane"] = "300KJ",	
	["refsyngas"] = "300KJ",
	["xylenol"] = "300KJ"




}

local emissions = {
  ["crude-oil"] = 1.35,
  ["light-oil"] = 1.1,
  ["heavy-oil"] = 1.2,
  ["petroleum-gas"] = 1,
  ["diesel-fuel"] = 0.8,
  
  	["acetylene"] = 1, -- 56,04 МДж/м3 
	["coal-gas"] = 1.5, -- 17,5 Мдж/м3
	["combustion-mixture1"] = 1,
	["combustion-mixture2"] = 1,
	["crude-oil"] = 1.35, -- 44 MДж/кг
	["diborane"] = 1,
	["diesel"] = 0.8, -- 44,8 MДж/кг
	["gas-butadiene"] = 1,
	["gas-butane"] = 1, --118,68 МДж/м3 
	["gas-ethane"] = 1,  -- 63,77 /15230
	["gas-ethylbenzene"] = 1,
	["gas-hydrogen"] = 1, -- 13 МДж/м3 
	["gas-methane"] = 1, -- 35,83 /8558
	["gas-methanol"] = 1, -- Ethanol 30 MДж/кг
	["gas-natural-1"] = 1,  -- 35 МДж/м3 
	["gas-propene"] = 1, -- 86,49 МДж/м3 
	["gas-raw-1"] = 1,
	["gasoline"] = 1, -- 46 МДж/кг, 32,7 МДж/литр
	["heavy-oil"] = 1.5, 
	["hydrogen"] = 0.1, -- 10,78 МДж/м3 
	["kerosene"] = 0.8, -- 35,000	8,350
	["light-oil"] = 1,
	["liquid-fuel"] = 1, 
	["liquid-fuel-oil"] = 1,  --Gas oil	38MДж/кг
	["liquid-multi-phase-oil"] = 3, --21,5MДж/кг
	["liquid-naphtha"] = 1.3,
	["liquid-toluene"] = 1.2, --40,9MДж/кг
	["methanol"] = 1, -- 22 МДж/кг
	["petroleum-gas"] = 1, 
	["refsyngas"] = 1,
	["syngas"] = 1, -- 11,5 Мдж/м3
	["xylenol"] = 1,

["gas-ammonia"] = 1.5,  --18,6  Мдж/м3
["gas-hydrogen-sulfide"] = 3,  --25,14  Мдж/м3
["gas-ethylene"] = 1,  --48  Мдж/м3
["gas-benzene"] = 2.5, -- 40,5 МДж/кг
["gas-synthesis"] = 1, -- 11,5 Мдж/м3
["gas-residual"] = 1.5, -- 42 Мдж/м3
["acetone"] = 1 -- 31,4 МДж/кг

--"gas-hydrazine" --fuel_value = "380KJ",
}

local parse_energy = function(energy)
  local ending = energy:sub(energy:len())
  if not (ending == "J" or ending == "W") then
    error(ending.. " is not a valid unit of energy")
  end
  local magnitude = energy:sub(energy:len() - 1, energy:len() - 1)
  local multiplier = 1
  if type(magnitude) == "number" then
    return tonumber(energy:sub(1, energy:len()-1))
  end
  local char = {
    k = 1000,
    K = 1000,
    M = 1000000,
    G = 1000000000,
    T = 1000000000000,
    P = 1000000000000000,
    E = 1000000000000000000,
    Z = 1000000000000000000000,
    Y = 1000000000000000000000000
  }
  multiplier = char[magnitude]
  if not multiplier then error(magnitude.. " is not valid magnitude") end
  return tonumber(energy:sub(1, energy:len()-2)) * multiplier
end

local names = {}

for k, fluid in pairs (data.raw.fluid) do
  if not fluid.fuel_value then
    fluid.fuel_value = fuel_values[fluid.name]
  end
  if not fluid.emissions_multiplier then
    fluid.emissions_multiplier = emissions[fluid.name]
  end
  if fluid.fuel_value then
    local icons = fluid.icons or {}
    if fluid.icon then
      table.insert(icons, {icon = fluid.icon, icon_size = fluid.icon_size})
    end
    table.insert(icons, {icon = "__KS_Power__/graphics/icons/fire-icon-128.png", icon_size = 128})
    data:extend({
    {
      type = "recipe",
      name = "burn-"..fluid.name,
      energy_required = 1,
      enabled = "false",
      order = fluid.order or fluid.name,
      category = "OilBurn",
      ingredients =
      {
        {type="fluid", name= "water", amount = 90},
        {type="fluid", name= fluid.name, amount = 3600000 / parse_energy(fluid.fuel_value)},
      },
      results =
      {
        {type="fluid", name="steam", amount=90, temperature = 165}
      },
      main_product= "",
      icons = icons,
      subgroup = "oil-burning",
      emissions_multiplier = fluid.emissions_multiplier,
      localised_name = {"burn", fluid.localised_name or {"fluid-name."..fluid.name}}
    }
    })
    table.insert(names, "burn-"..fluid.name)
  end
end

local effects = {
{
  type = "unlock-recipe",
  recipe = "OilSteamBoiler"
}}

for k, name in pairs (names) do
  table.insert(effects,
  {
    type = "unlock-recipe",
    recipe = name
  })
end

data:extend({{
  type = "technology",
  name = "OilBurning",
  icon = "__KS_Power__/graphics/oil-boiler-tech2.png",
  icon_size = 128,
  effects = effects,
  prerequisites = {"oil-processing","concrete"},
  unit =
  {
    count = 200,
    ingredients =
    {
      {"automation-science-pack", 1},
      {"logistic-science-pack", 1}
    },
    time = 30
  },
  order = "f-b-c",
}})

for k, module in pairs(data.raw.module) do
  if module.effect and module.effect.productivity and module.limitation then
    for j, recipe in pairs(names) do
      table.insert(module.limitation, recipe)
    end
  end
end
